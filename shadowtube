#!/usr/bin/python

### Dependencies

from __future__ import print_function
import itertools, threading, subprocess
import socket, shutil
import time, json, html
import sys
import re, io, os

try:
	from lxml.cssselect import CSSSelector
	from stem.control import Controller
	from requests import get
	from stem import Signal
	from stem.connection import IncorrectPassword
	from stem import SocketError
	from argparse import RawDescriptionHelpFormatter
	import lxml.html
	import requests
	import argparse
	import socket
	import socks
except ImportError:
	print("> Installing dependencies...", end=" ", flush=True)
	try:
		subprocess.check_call([sys.executable, '-m', 'pip', '-r', 'install', 'requirements.txt'])
	except SystemError:
		print("\nError: Failed to install dependencies."); sys.exit(1)
	print("Done")

### Global

YOUTUBE_VIDEO_URL = "https://www.youtube.com/watch?v={video_id}"
YOUTUBE_COMMENTS_AJAX_URL = "https://www.youtube.com/comment_service_ajax"
USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36"

settings_dict = None
file_paths = ['settings.json', '/etc/shadowtube/settings.json']
for file_path in file_paths:
	try:
		with open(file_path) as fp:
			settings_dict = json.load(fp)
			break
	except FileNotFoundError:
		pass
if settings_dict is None:
	print("\nError: Missing 'settings.json'.")
	sys.exit(1)

use_control_pass = settings_dict["use_control_pass"]
control_pass = settings_dict["control_pass"]
control_port = settings_dict["control_port"]
socks_port = settings_dict["socks_port"]

### Tor

def tor_session():
	session = requests.Session()
	session.proxies = {
		"http": f"socks5://localhost:{socks_port}",
		"https": f"socks5://localhost:{socks_port}"
	}
	return session

def tor_rotate():
	time.sleep(10)
	try:
		with Controller.from_port(port = control_port) as controller:
			if use_control_pass:
				controller.authenticate(password = control_pass)
				controller.signal(Signal.NEWNYM)
			else:
				controller.authenticate()
				controller.signal(Signal.NEWNYM)
	except IncorrectPassword:
		print("\nError: Failed to authenticate. Control port password incorrect."); sys.exit(1)
	except SocketError:
		print("\nError: Connection refused. Ensure cookie authentication/control port are enabled."); sys.exit(1)

def tor_validate():
	print("> Connecting to Tor service...", end=" ", flush=True)
	try:
		tor_session().get("https://api.seeip.org")
		print("Done")
	except IOError:
		print("Failed")
		confirm = input("⫺ Launch Tor Browser? (y/N) ").lower()
		if confirm in ["y", "yes"]:
			try:
				print("> Launching...", end=" ", flush=True)
				subprocess.run("torbrowser-launcher", shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
				time.sleep(16)
				print("Done")
			except subprocess.CalledProcessError:
				print("\nError: Failed."); sys.exit(1)
		elif confirm in ["n", "no", ""]:
			sys.exit(0)

### Output

def status(attempts, accessed):
	print("\nStatus:", end=" ")
	messages = {
		0: "N/A (Insufficient analysis time)",
		accessed == 0: "Alarming",
		accessed < attempts: "Questionable",
		accessed == attempts: "Healthy"
	}
	print(messages.get(True, "N/A (Resolution error)"))

def geoip():
	try:
		response = tor_session().get("https://api.seeip.org/geoip")
		response_dict = response.json()
		print(f"{response_dict['country']} — {response_dict['ip']}")
	except Exception:
		print("N/A")

### Video <https://www.youtube.com/watch?v=Y6ljFaKRTrI>

def video(video_id):
	attempts, accessed, analyses = 0, 0, 0
	video_url = f"https://www.youtube.com/watch?v={video_id}"
	try:
		print("> Fetching metadata...", end=" ", flush=True)
		while True:
			try:
				title_request = tor_session().get(video_url).text
				parse_title = str(re.findall('<title>(.*?) - YouTube</title><meta name="title" content=', title_request))
				title = html.unescape(parse_title.split("'")[1])
				break
			except IndexError:
				tor_rotate()
		print("Done")
		while True:
			cycles = input("⫺ Analytical intensity (default is 8): ")
			if cycles == "":
				cycles = 8
				break
			elif not cycles.isdigit():
				print("Error: Invalid input. Please enter a positive integer.")
			else:
				cycles = int(cycles)
				break
		if title == "":
			print("\nThis video isn't available anymore.")
			sys.exit(0)
		else:
			print(f'\nTitle: "{title}"\nVideo URL: {video_url}\n\nInterrupt (CTRL+C) to conclude the session\n')
		while analyses < cycles:
			search_response = tor_session().get("https://www.youtube.com/results?search_query=" + "+".join(title.split())).text
			if search_response.find('"title":{"cycles":[{"text":"') >= 0:
				if search_response.find(title) >= 0:
					analyses += 1
					accessed += 1
					print(f"[\033[1m+\033[0m] [{str(analyses)}/8]", end=" ")
				else:
					analyses += 1
					print(f"[\033[1m-\033[0m] [{str(analyses)}/8]", end=" ")
				geoip()
				attempts += 1
			## TO-DO: evolve throttle detection
			video_response = tor_session().get(video_url)
			if re.search(r"googleusercontent.com/videoplayback", video_response.content.decode("utf-8")):
				print("╰──\033[1m⚠\033[0m Throttling")
			tor_rotate()
		status(attempts, accessed)
	except KeyboardInterrupt:
		status(attempts, accessed)

### Comments <"https://www.youtube.com/watch?v=Y6ljFaKRTrI&lc=UgxmFEu_rNYmz8yEY0B4AaABAg">

def comment(video_id, comment_id):
	attempts, accessed, analyses = 0, 0, 0
	video_url = f"https://www.youtube.com/watch?v={video_id}"
	comment_url = f"{video_url}&lc={comment_id}"
	try:
		print("> Fetching metadata...", end=" ", flush=True)
		while True:
			try:
				title_request = tor_session().get(video_url).text
				parse_title = str(re.findall('<title>(.*?) - YouTube</title><meta name="title" content=', title_request))
				title = html.unescape(parse_title.split("'")[1])
				break
			except IndexError:
				tor_rotate()
		print("Done")
		while True:
			cycles = input("⫺ Analytical intensity (default is 8): ")
			if cycles == "":
				cycles = 8
				break
			elif not cycles.isdigit():
				print("Error: Invalid input. Please enter a positive integer.")
			else:
				cycles = int(cycles)
				break
		print(f'\nTitle: {title}\nComment URL: {comment_url}\n\nInterrupt (CTRL+C) to conclude the session\n')
		while analyses < cycles:
			comments_fetch(video_id)
			with open("comments.json", "r") as comments:
				if comments.read().find(comment_id) >= 0:
					print("[\033[1m+\033[0m]", end=" ")
					analyses += 1
					accessed += 1
				else:
					print("[\033[1m-\033[0m]", end=" ")
					analyses += 1
				geoip()
			attempts += 1
			tor_rotate()
		status(attempts, accessed)
	except KeyboardInterrupt:
		status(attempts, accessed)

## <yt-dlp --dump-json --no-download --no-warnings --flat-playlist --proxy socks5://localhost:{socks_port} --write-comments --extractor-args youtube:max_comments=1000 https://www.youtube.com/watch?v={video_id} | > temp.json>

def comments_fetch(video_id):
	## Threading from multiple different connections?
	## Add progress bar
	command = (
		f"yt-dlp "
		f"--dump-json "
		f"--no-download "
		f"--no-warnings "
		f"--flat-playlist "
		f"--write-comments "
		## Proxies from same socks5 session
		f"--proxy socks5://localhost:{socks_port} "
		f"--extractor-args youtube:max_comments=1000 "
		f"https://www.youtube.com/watch?v={video_id} > temp.json"
	)
	print("> Fetching comments...", end=" ", flush=True)
	try:
		## "stderr" parameter discards the yt-dlp's error output for cleanliness
		output = subprocess.check_output(command, stderr=subprocess.DEVNULL, shell=True)
	except OSError:
		print("Failed")
		tor_rotate()
	print("Done")
	with open('temp.json') as temp_json:
		data = json.load(temp_json)
	ids = [comment['id'] for comment in data['comments']]
	output_data = {"ids": ids}
	with open('comments.json', 'w') as comments_json:
		json.dump(output_data, comments_json)

### Init

def main():
	logo = """
 ▄█████████████▄   ▄▄▄▄ .▄▄             ╔▄,             ╓▄▄▄▄▄,    .▄▄
████████▀ ███████ ║█▌╜▀▀▐█▌▄▄,  ▄▄▄  .▄▄██╕ ╓▄▄, ▄Q ▄, ▄▄▀▓█▌▀▄,.▄,(██▄▄,  ▄▄▄
██████▀   ███████ `▓██▄ ▐██▀██(██▀██ ██▀▓█M╫█▀▓█▌▓█╦██╢█▌ ╣█▌╟█▌▐█▌(██▀██∩██▀██
███████▄  ███████ .,╙▀██▐█▌▐██ ▄████∩██∩╢█M▓█░║█▌╚██████  ╣█▌╟█▌▐█▌(█▌(██∩██▀▀▀
╙████████▄██████╜ ╙█████▐█▌▐██▐██▄██∩██▄██M╚████▌ ██▌▓█▌  ╢█▌╠████▌(██▄██∩▓█▄██
 ╙▀▀▀▀▀▀▀▀▀▀▀▀▀╜    └░└  ╙└ ┘░ '╙░└░  └░'"  '╙░`  '░ `░   `"  ╙░'╙' ╙└╙░   ╙╙░

                            Created by Dane Hobrecht
	"""
	parser = argparse.ArgumentParser(prog="shadowtube", description="A YouTube shadowban detection program.", formatter_class=argparse.RawTextHelpFormatter)
	group = parser.add_mutually_exclusive_group()
	group.add_argument("-v", "--video", metavar="VIDEO_URL", help="video analysis ('https://youtu.be/<VIDEO_ID>', 'https://www.youtube.com/watch?v=<VIDEO_ID>')")
	group.add_argument("-c", "--comment", metavar="COMMENT_URL", help="""format: ('"https://www.youtube.com/watch?v=<VIDEO_ID>&lc=<COMMENT_ID>"')\nnote: URL must be wrapped in quotes.""")
	args = parser.parse_args()
	os.system('clear')
	print(logo)
	if args.video:
		video_url = str(args.video)
		if "https://www.youtube.com/watch?v=" in video_url:
			video_id = video_url.replace("https://www.youtube.com/watch?v=", "")
		elif "https://youtu.be/" in video_url:
			video_id = video_url.replace("https://youtu.be/", "")
		if len(video_id) == 11:
			tor_validate()
			video(video_id)
		else:
			print("Error: Invalid input."); sys.exit(1)
	elif args.comment:
		comment_url = str(args.comment)
		if "https://www.youtube.com/watch?v=" in comment_url:
			comment_id = comment_url.split('&lc=', 1)[-1]
			video_id = comment_url.replace("https://www.youtube.com/watch?v=", "").split('&lc=', 1)[0]
		if len(video_id) == 11 and len(comment_id) == 26:
			tor_validate()
			comment(video_id, comment_id)
		else:
			print('Error: Invalid input. Refer to "shadowtube --help".'); sys.exit(1)
		"""
		print('> The basic HTML page data from https://www.youtube.com/feed/history/comment_history must be locally available to the script as "Google - My Activity.html"')
		confirm = input("⫺ Proceed? (y/N) ").lower()
		if confirm in ["y", "yes"]:
			try:
				with open("Google - My Activity.html", "r"):
					comments()
			except FileNotFoundError:
				print("\nError: File does not exist."); sys.exit(1)
		elif confirm in ["n", "no", ""]:
			sys.exit(0)
		sys.exit(0)
		"""
	else:
		try:
			os.system("python shadowtube -h")
		except OSError:
			try:
				os.system("shadowtube -h")
			except OSError:
				print("\nError: Missing executable."); sys.exit(1)

if __name__ == "__main__":
	main()

## constantly test for interruption, close tor browser, and delete json files